[{"id":0,"href":"/docs/configuration/overview/","title":"Overview","section":"Configuration","content":"Configuration Krab by default will load and parse all the configuration files at KRAB_DIR path. File names should end with .krab.hcl extension, otherwise they won\u0026rsquo;t be loaded.\nEvery command that touches database is required to provide DATABASE_URL environment variable.\n"},{"id":1,"href":"/docs/get_started/overview/","title":"Overview","section":"Get Started","content":"Overview Krab documentation consists of the following chapters:\n Get started - things to get you set up and running Configuration - resources to use in the configuration files Functions - functions to use in the configuration files Commands - manual for CLI  Glossary  configuration file - file with .krab.hcl extension resource - block of code of a given type in a configuration file (e.g. migration resource, migration_set resource etc.) function - built-in function that is available to use in config files command - CLI command that executes built-in action like migrate up reference - identifiable name of a resource, must be unique within a given type (migration \u0026quot;that_is_reference\u0026quot; {...})  "},{"id":2,"href":"/docs/configuration/environment_variables/","title":"Environment Variables","section":"Configuration","content":"Environment variables  KRAB_DIR - directory to load configuration from, if not defined, it defaults to the current working directory DATABASE_URL - PostgreSQL connection string to use when executing actions  "},{"id":3,"href":"/docs/get_started/installation/","title":"Installation","section":"Get Started","content":"Installation Krab binary can be downloaded from GitHub. Other methods are listed below.\nasdf Krab provides asdf plugin:\nasdf plugin add krab https://github.com/ohkrab/asdf-krab.git # or asdf plugin add krab git@github.com:ohkrab/asdf-krab.git Install desired version:\nasdf install krab 0.2.4 Set it to your project:\nasdf local krab 0.2.4 docker To start a docker container a DATABASE_URL environment variable must be provided. By default \u0026ldquo;krab\u0026rdquo; reads configuration from /etc/krab that must be mounted as a volume, the path can be changed by KRAB_DIR environment variable.\nPull the docker image:\ndocker pull ohkrab/krab-cli:latest Example:\ndocker run --rm \\  # remove container after command execution -e DATABASE_URL=\u0026#34;...\u0026#34; \\  # provide connection string -v ${HOME}/project1:/etc/krab:ro \\  # mount configuration volume ohkrab/krab-cli:latest version # run `version` command from `qbart/krab:latest` "},{"id":4,"href":"/docs/get_started/changelog/","title":"Changelog","section":"Get Started","content":"Changelog 0.3.1  fixes issue with rolling back the same migration multiple times  0.3.0  fixes issues with concurrent operations  0.2.4  added docker  0.2.3  added validations improved CLI output migration versions are required now  Prereleases: 0.2.2 and below  migrations  Do not use prerelease versions.\n"},{"id":5,"href":"/docs/commands/version/","title":"Version","section":"Commands","content":"Krab version The version command prints the version of Krab.\nUsage krab version Example $ krab version krab 0.2.4 Build a2aa572cd37e64c38f16925c1152a2bed1fc4c0a 2021-07-04 "},{"id":6,"href":"/docs/configuration/resources/migration/","title":"Migration","section":"Resources","content":"Migration Migration resource is a single migrate operation.\nmigration \u0026#34;\u0026lt;reference\u0026gt;\u0026#34; { version = \u0026#34;\u0026lt;version\u0026gt;\u0026#34; transaction = true up { sql = \u0026#34;...\u0026#34; } down { sql = \u0026#34;...\u0026#34; } }  \u0026lt;reference\u0026gt; - is a migration reference name to use when connecting to other resources \u0026lt;version\u0026gt; - name that will be used to identify migration in the database, can only be digits, alphanumeric characters and underscores up / down - migration direction, contains SQL code to be executed transaction (optional) - specifies whether run migration in a transaction (default: true)  Example migration \u0026#34;create_tenants\u0026#34; { version = \u0026#34;20060102150405\u0026#34; up { sql = \u0026#34;CREATE TABLE tenants(name VARCHAR PRIMARY KEY)\u0026#34; } down { sql = \u0026#34;DROP TABLE tenants\u0026#34; } } "},{"id":7,"href":"/docs/configuration/resources/migration_set/","title":"Migration Set","section":"Resources","content":"Migration Set Migration Set is a collection of migrations.\nmigration_set \u0026#34;\u0026lt;reference\u0026gt;\u0026#34; { migrations = [ ... ] }  \u0026lt;reference\u0026gt; - migration set reference name migrations - list of migrations references  Example migration_set \u0026#34;private\u0026#34; { migrations = [ migration.create_tenants ] } migration \u0026#34;create_tenants\u0026#34; { version = \u0026#34;20200628\u0026#34; up { sql = \u0026#34;CREATE TABLE tenants(name varchar PRIMARY KEY)\u0026#34; } down { sql = \u0026#34;DROP TABLE tenants\u0026#34; } } "},{"id":8,"href":"/docs/functions/filesystem/","title":"Filesystem","section":"Functions","content":"Filesystem Functions that can be used in krab configuration files.\nfile_read file_read reads a file at the given path and returns its content as a string.\nsql = file_read(\u0026#34;path\u0026#34;) "},{"id":9,"href":"/docs/commands/migrate/down/","title":"down","section":"Migrate","content":"Migrate down The migrate down command rollbacks selected migration.\nAfter successful operation its version is removed from the migration table. At the beginning of an operation advisory lock is acquired to prevent other operations to run simultaneously.\nUsage krab migrate down [set] [version] Options  set - name of the set to migrate. version - migration version to rollback.  Example For default migration set and migration version 20060102150405 you would use:\nkrab migrate down default 20060102150405 "},{"id":10,"href":"/docs/commands/migrate/up/","title":"up","section":"Migrate","content":"Migrate up The migrate up command migrates all pending migration for a given migration set.\nAfter successful migration its version is put into database migration table (by default schema_migrations). At the beginning of an operation advisory lock is acquired to prevent other migrations to run simultaneously.\n Migrations are executed in the order defined by migration set, NOT lexicographically. When migration table does not exist, it will be created   Usage krab migrate up [set] Options  set - name of the set to migrate.  Example For default migration set you would use:\nkrab migrate up default "}]