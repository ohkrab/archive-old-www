[{"id":0,"href":"/docs/configuration/overview/","title":"Overview","section":"Configuration","content":"Configuration Krab by default will load and parse all the configuration files at KRAB_DIR path. File names should end with .krab.hcl extension, otherwise they won\u0026rsquo;t be loaded.\nEvery command that touches database is required to provide DATABASE_URL environment variable.\n"},{"id":1,"href":"/docs/get_started/overview/","title":"Overview","section":"Get Started","content":"Overview Krab documentation consists of the following chapters:\n Get started - things to get you set up and running Configuration - resources to use in the configuration files Functions - functions to use in the configuration files Commands - manual for CLI  Glossary  configuration file - file with .krab.hcl extension resource - block of code of a given type in a configuration file (e.g. migration resource, migration_set resource etc.) function - built-in function that is available to use in config files command - CLI command that executes built-in action like migrate up reference - identifiable name of a resource, must be unique within a given type (migration \u0026quot;that_is_reference\u0026quot; {...})  "},{"id":2,"href":"/docs/configuration/environment_variables/","title":"Environment Variables","section":"Configuration","content":"Environment variables  KRAB_DIR - directory to load configuration from, if not defined, it defaults to the current working directory DATABASE_URL - PostgreSQL connection string to use when executing actions  "},{"id":3,"href":"/docs/get_started/installation/","title":"Installation","section":"Get Started","content":"Installation Krab binary can be downloaded from GitHub. Other methods are listed below.\nasdf Krab provides asdf plugin:\nasdf plugin add krab https://github.com/ohkrab/asdf-krab.git # or asdf plugin add krab git@github.com:ohkrab/asdf-krab.git Install desired version:\nasdf install krab 0.4.1 Set it to your project:\nasdf local krab 0.4.1 docker Docker images can be found at Docker hub üêã\nTo start a docker container a DATABASE_URL environment variable must be provided. By default \u0026ldquo;krab\u0026rdquo; reads configuration from /etc/krab that must be mounted as a volume, the path can be changed by KRAB_DIR environment variable.\nPull the docker image:\ndocker pull ohkrab/krab:nightly Example:\ndocker run --rm \\  # remove container after command execution -e DATABASE_URL=\u0026#34;...\u0026#34; \\  # provide connection string -v ${HOME}/project1:/etc/krab:ro \\  # mount configuration volume ohkrab/krab:nightly --version # run `--version` command from `qbart/krab:latest` one-liner:\ndocker run --rm -e DATABASE_URL=\u0026#34;...\u0026#34; -v ${HOME}/project1:/etc/krab:ro ohkrab/krab:nightly --version "},{"id":4,"href":"/docs/get_started/changelog/","title":"Changelog","section":"Get Started","content":"Changelog 0.4.0  migration status action be explicit about identifier quoting (quote -\u0026gt; quote_ident) improved CLI UI  0.4.0  migration DSL (not only raw sql) custom schema for migration sets (new attribute) actions (new resource) resource arguments (parametrized commands) windows support small improvements for CLI output schema migration table contains timestamp now  0.3.1  fixes issue with rolling back the same migration multiple times  0.3.0  fixes issues with concurrent operations  0.2.4  added docker  0.2.3  added validations improved CLI output migration versions are required now  Prereleases: 0.2.2 and below  migrations  Do not use prerelease versions.\n"},{"id":5,"href":"/docs/configuration/resource-arguments/","title":"Resource Arguments","section":"Configuration","content":"Resource arguments Some resources accept arguments block that allows to parametrize command.\nArguments blocks are optional and can expand configuration in a flexible ways.\nresource [\u0026#34;label\u0026#34; [\u0026#34;label\u0026#34;...]] { arguments { arg \u0026#34;one\u0026#34; { description = \u0026#34;Some argument description\u0026#34; } arg \u0026#34;two\u0026#34; { description = \u0026#34;Argument with specified type\u0026#34; type = \u0026#34;string\u0026#34;# default  } } }  arg \u0026quot;name\u0026quot; - argument name description - summary of a argument type - currently can only be a string type arguments are required to pass into command  Arguments usage Krab uses Go lang templates to replace values. For full documentation refer to official documentation. For arguments support refer to specific resource documentation.\nArguments are not quoted by default unless stated otherwise ‚ö†Ô∏è.\nExample:\nsql = \u0026quot;CREATE SCHEMA {{ quote_ident .Args.name }}\u0026quot; All arguments must be prefixed with .Args.\nBuilt-in functions There are built-in functions that allow to operate on arguments before final template is rendered.\n quote_ident - quotes identifiers in database, for example: table/column names  "},{"id":6,"href":"/docs/commands/action/","title":"Action","section":"Commands","content":"Action Actions are genarated from configuration and grouped by namespace.\nUsage krab action namespace name [arguments] Example For view refresh action you would use:\nkrab action view refresh -name my-view-name "},{"id":7,"href":"/docs/commands/version/","title":"Version","section":"Commands","content":"Krab version The version command prints the version of Krab.\nUsage krab version Example $ krab version krab 0.2.4 Build a2aa572cd37e64c38f16925c1152a2bed1fc4c0a 2021-07-04 "},{"id":8,"href":"/docs/configuration/resources/action/","title":"Action","section":"Resources","content":"Action Action resource is a custom SQL operation that will be executed.\naction \u0026#34;\u0026lt;namespace\u0026gt;\u0026#34; \u0026#34;\u0026lt;name\u0026gt;\u0026#34; { arguments { ... } sql = \u0026#34;...\u0026#34; }  \u0026lt;namespace\u0026gt; - is a action namespace \u0026lt;name\u0026gt; - is a migration reference name to use when connecting to other resources arguments block (optional) - define arguments that can be used in sql as a variable, see Resource arguments for more details sql - code to be executed  Arguments These attributes can be used with arguments:\n sql  Example action \u0026#34;view\u0026#34; \u0026#34;refresh\u0026#34; { arguments { arg \u0026#34;name\u0026#34; { description = \u0026#34;Materialized view to be refreshed\u0026#34; } } sql = \u0026#34;REFRESH MATERIALIZED VIEW {{ .Args.name | quote_ident }}\u0026#34; } "},{"id":9,"href":"/docs/configuration/resources/migration/","title":"Migration","section":"Resources","content":"Migration Migration resource is a single migrate operation.\nmigration \u0026#34;\u0026lt;reference\u0026gt;\u0026#34; { version = \u0026#34;\u0026lt;version\u0026gt;\u0026#34; transaction = true up { sql = \u0026#34;...\u0026#34; } down { sql = \u0026#34;...\u0026#34; } }  \u0026lt;reference\u0026gt; - is a migration reference name to use when connecting to other resources \u0026lt;version\u0026gt; - name that will be used to identify migration in the database, can only be digits, alphanumeric characters and underscores up / down - migration direction, contains SQL code to be executed transaction (optional) - specifies whether run migration in a transaction (default: true)  DSL Up/Down migration can use built-in DSL for Data Definition Language.\nDSL order matters, code will run in that order (sql attribute order also matters)  Supported DDL:\n CREATE TABLE DROP TABLE CREATE INDEX DROP INDEX  Example migration \u0026#34;create_tenants\u0026#34; { version = \u0026#34;20060102150405\u0026#34; up { sql = \u0026#34;CREATE TABLE tenants(name VARCHAR PRIMARY KEY)\u0026#34; } down { sql = \u0026#34;DROP TABLE tenants\u0026#34; } } DSL example migration \u0026#34;create_categories\u0026#34; { version = \u0026#34;v1\u0026#34; up { create_table \u0026#34;categories\u0026#34; { column \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; {} column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; { null = false } primary_key { columns = [\u0026#34;id\u0026#34;] } } } down { drop_table \u0026#34;categories\u0026#34; {} } } migration \u0026#34;create_animals\u0026#34; { version = \u0026#34;v2\u0026#34; up { create_table \u0026#34;animals\u0026#34; {# \u0026#34;id\u0026#34; bigint GENERATED ALWAYS AS IDENTITY \tcolumn \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; { identity {} } column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; { null = true } column \u0026#34;extinct\u0026#34; \u0026#34;boolean\u0026#34; { null = false default = true } column \u0026#34;weight_kg\u0026#34; \u0026#34;int\u0026#34; { null = false }# \u0026#34;weight_g\u0026#34; int GENERATED ALWAYS AS (weight_kg * 1000) STORED \tcolumn \u0026#34;weight_g\u0026#34; \u0026#34;int\u0026#34; { generated { as = \u0026#34;weight_kg * 1000\u0026#34; } } column \u0026#34;category_id\u0026#34; \u0026#34;bigint\u0026#34; { null = false } unique { columns = [\u0026#34;name\u0026#34;] include = [\u0026#34;weight_kg\u0026#34;] } primary_key { columns = [\u0026#34;id\u0026#34;] include = [\u0026#34;name\u0026#34;] }# CONSTRAINT \u0026#34;ensure_positive_weight\u0026#34; CHECK (weight_kg \u0026gt; 0) \tcheck \u0026#34;ensure_positive_weight\u0026#34; { expression = \u0026#34;weight_kg \u0026gt; 0\u0026#34; } foreign_key { columns = [\u0026#34;category_id\u0026#34;] references \u0026#34;categories\u0026#34; { columns = [\u0026#34;id\u0026#34;] on_delete = \u0026#34;cascade\u0026#34; on_update = \u0026#34;cascade\u0026#34; } } } } down { drop_table \u0026#34;animals\u0026#34; {} } } migration_set \u0026#34;animals\u0026#34; { migrations = [ migration.create_categories, migration.create_animals ] } DSL index example migration \u0026#34;create_animals\u0026#34; { version = \u0026#34;v1\u0026#34; transaction = false up { create_table \u0026#34;animals\u0026#34; { column \u0026#34;id\u0026#34; \u0026#34;bigint\u0026#34; {} column \u0026#34;name\u0026#34; \u0026#34;varchar\u0026#34; {} column \u0026#34;extinct\u0026#34; \u0026#34;boolean\u0026#34; {} column \u0026#34;weight_kg\u0026#34; \u0026#34;int\u0026#34; {} }# CREATE UNIQUE INDEX \u0026#34;idx_uniq_name\u0026#34; ON \u0026#34;animals\u0026#34; USING btree (\u0026#34;name\u0026#34;) INCLUDE (\u0026#34;weight_kg\u0026#34;) \tcreate_index \u0026#34;animals\u0026#34; \u0026#34;idx_uniq_name\u0026#34; { unique = true columns = [\u0026#34;name\u0026#34;] using = \u0026#34;btree\u0026#34; include = [\u0026#34;weight_kg\u0026#34;] }# CREATE INDEX CONCURRENTLY \u0026#34;idx_heavy_animals\u0026#34; ON \u0026#34;animals\u0026#34; (\u0026#34;weight_kg\u0026#34;) WHERE (weight_kg \u0026gt; 5000) \tcreate_index \u0026#34;animals\u0026#34; \u0026#34;idx_heavy_animals\u0026#34; { columns = [\u0026#34;weight_kg\u0026#34;] where = \u0026#34;weight_kg \u0026gt; 5000\u0026#34; concurrently = true } } down { drop_index \u0026#34;public.idx_uniq_name\u0026#34; { cascade = true } drop_index \u0026#34;idx_heavy_animals\u0026#34; { concurrently = true } drop_table \u0026#34;animals\u0026#34; {} } } migration_set \u0026#34;animals\u0026#34; { migrations = [ migration.create_animals ] } "},{"id":10,"href":"/docs/configuration/resources/migration_set/","title":"Migration Set","section":"Resources","content":"Migration Set Migration Set is a collection of migrations.\nmigration_set \u0026#34;\u0026lt;reference\u0026gt;\u0026#34; { schema = \u0026#34;public\u0026#34; migrations = [ ... ] }  \u0026lt;reference\u0026gt; - migration set reference name schema (optional) - schema name where to create schema_migrations table and run migrations (SET search_path TO \u0026lt;schema\u0026gt; is executed before each migration), default: public migrations - list of migrations references  Arguments These attributes can be used with arguments:\n schema - value is automatically quoted  migration_set \u0026#34;tenant\u0026#34; { arguments { arg \u0026#34;schema\u0026#34; {} } schema = \u0026#34;{{.Args.schema}}\u0026#34; migrations = [...] } Example migration_set \u0026#34;private\u0026#34; { migrations = [ migration.create_tenants ] } migration \u0026#34;create_tenants\u0026#34; { version = \u0026#34;20200628\u0026#34; up { sql = \u0026#34;CREATE TABLE tenants(name varchar PRIMARY KEY)\u0026#34; } down { sql = \u0026#34;DROP TABLE tenants\u0026#34; } } "},{"id":11,"href":"/docs/functions/filesystem/","title":"Filesystem","section":"Functions","content":"Filesystem Functions that can be used in krab configuration files.\nfile_read file_read reads a file at the given path and returns its content as a string.\nsql = file_read(\u0026#34;path\u0026#34;) "},{"id":12,"href":"/docs/commands/migrate/down/","title":"down","section":"Migrate","content":"Migrate down The migrate down command rollbacks selected migration.\nAfter successful operation its version is removed from the migration table. At the beginning of an operation advisory lock is acquired to prevent other operations to run simultaneously.\nUsage krab migrate down [set] [version] Options  set - name of the set to migrate. version - migration version to rollback.  Example For default migration set and migration version 20060102150405 you would use:\nkrab migrate down default 20060102150405 "},{"id":13,"href":"/docs/commands/migrate/up/","title":"up","section":"Migrate","content":"Migrate up The migrate up command migrates all pending migration for a given migration set.\nAfter successful migration its version is put into database migration table (by default schema_migrations). At the beginning of an operation advisory lock is acquired to prevent other migrations to run simultaneously.\n Migrations are executed in the order defined by migration set, NOT lexicographically. When migration table does not exist, it will be created   Usage krab migrate up [set] Options  set - name of the set to migrate.  Example For default migration set you would use:\nkrab migrate up default "}]